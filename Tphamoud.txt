function gaussian_filter = gaussien_filter(img)
    % Convert image to grayscale if it's not already in grayscale
    if size(img, 3) == 3
        img_gray = rgb2gray(img);
    else
        img_gray = img;
    end
    
    % Convert image to double and scale to [0, 1]
    img_double = double(img_gray) / 255;
    
    % Add noise to the image
    noisy_img = imnoise(img_double, 'salt & pepper', 0.05); % Add salt and pepper noise
    
    % Apply Gaussian filter manually
    [height, width] = size(noisy_img);
    filtered_img = zeros(height, width);

    for i = 2:height-1
        for j = 2:width-1
            filtered_img(i,j) = ((noisy_img(i-1,j-1)*1 + noisy_img(i-1,j)*2 + noisy_img(i-1,j+1)*1 + ...
                                  noisy_img(i,j-1)*2 + noisy_img(i,j)*4 + noisy_img(i,j+1)*2 + ...
                                  noisy_img(i+1,j-1)*1 + noisy_img(i+1,j)*2 + noisy_img(i+1,j+1)*1) / 16);
        end
    end
    
    % Display original image, image with noise, and filtered image
    figure;
    subplot(1, 3, 1);
    imshow(uint8(img));
    title('Original Image');
    
    subplot(1, 3, 2);
    imshow(uint8(noisy_img * 255)); % Scale back to [0, 255] for display
    title('Image with Noise');

    subplot(1, 3, 3);
    imshow(uint8(filtered_img * 255)); % Scale back to [0, 255] for display
    title('Filtered Image');
    
    gaussian_filter = filtered_img; % Return the filtered image
end

***********************************moyenne********************************************
function img = moyenne_filter(img)
 
    noisy_img = imnoise(img, 'salt & pepper', 0.05); % Add salt and pepper noise
    
    % Display original image, image with noise, and apply filter
    figure;
    subplot(1, 3, 1);
    imshow(uint8(img));
    title('Original Image');
    subplot(1, 3, 2);
    imshow(uint8(noisy_img));
    title('Image with Noise');

     % Apply Gaussian filter
    [height, width] = size(noisy_img);
    filtered_img = zeros(height, width);

    for i = 2:height-1
        for j = 2:width-1
            filtered_img(i,j) = ((noisy_img(i-1,j-1)*1 + noisy_img(i-1,j)*1 + noisy_img(i-1,j+1)*1 + ...
                                  noisy_img(i,j-1)*1 + noisy_img(i,j)*1 + noisy_img(i,j+1)*1 + ...
                                  noisy_img(i+1,j-1)*1 + noisy_img(i+1,j)*1 + noisy_img(i+1,j+1)*1) / 9);
        end
    end
         % Display filtered image
    subplot(1, 3, 3);
    imshow(uint8(filtered_img));
    title('Filtered Image');
end
****************************************sobel filter************************************
function sobel_filter = sobel_filter(img)
 % Convert image to double and scale to [0, 1]
   
    noisy_img = double(img) / 255;
  % Add noise to the image
    %noisy_img = imnoise(img, 'salt & pepper', 0.05); % Add salt and pepper noise
    
    % Display original image, image with noise, and apply filter
    figure;
    subplot(1, 3, 1);
    imshow(uint8(img));
    title('Original Image');
    subplot(1, 3, 2);
    imshow(uint8(noisy_img));
    title('Image with Noise');

     % Apply Gaussian filter
    [height, width] = size(noisy_img);
    Masque_de_Prewitt_horizontal = zeros(height, width);
     Masque_de_Prewitt_vertical = zeros(height, width);  
    for i = 2:height-1
        for j = 2:width-1
            Masque_de_Prewitt_horizontal(i,j) = ((noisy_img(i-1,j-1)*-1 + noisy_img(i-1,j)*0 + noisy_img(i-1,j+1)*1 + ...
                                  noisy_img(i,j-1)*-1 + noisy_img(i,j)*0 + noisy_img(i,j+1)*1 + ...
                                  noisy_img(i+1,j-1)*-1 + noisy_img(i+1,j)*0 + noisy_img(i+1,j+1)*1));
        end
     end
     for i = 2:height-1
        for j = 2:width-1
            Masque_de_Prewitt_vertical(i,j) = ((noisy_img(i-1,j-1)*-1 + noisy_img(i-1,j)*-1 + noisy_img(i-1,j+1)*-1 + ...
                                  noisy_img(i,j-1)*0 + noisy_img(i,j)*0 + noisy_img(i,j+1)*0 + ...
                                  noisy_img(i+1,j-1)*1 + noisy_img(i+1,j)*1 + noisy_img(i+1,j+1)*1));
        end
     end
       % Original Image
       subplot(2, 2, 1);
       imshow(uint8(img));
       title('Original Image we will use sobel filter');
       % Calculate the squared sum of gradients
       sum_squared = Masque_de_Prewitt_horizontal.^2 + Masque_de_Prewitt_vertical.^2;

       % Calculate the square root of the squared sum
       root_squared_sum = sqrt(sum_squared);
       % Horizontal Gradient
       subplot(2, 2, 2);
       imshow(uint8(Masque_de_Prewitt_horizontal));
       title('Horizontal Gradient');
       % Vertical Gradient
       subplot(2, 2, 3);
       imshow(uint8(Masque_de_Prewitt_vertical));
       title('Vertical Gradient');

       % Final Result (Square Root of the Sum of Squared Gradients)
       subplot(2, 2, 4);
       imshow(uint8(root_squared_sum));
       title('Root of Sum of Squared Gradients');
       sobel_filter = root_squared_sum; % Update this with your filtered image


end
**************************************************************************************************
function img = RGB_moyenne_filter(img)
    % Convert image to double and scale to [0, 1]
    noisy_img = double(img) / 255;
    
    % Add salt and pepper noise to each color channel separately
    noisy_img(:,:,1) = imnoise(img(:,:,1), 'salt & pepper', 0.05);
    noisy_img(:,:,2) = imnoise(img(:,:,2), 'salt & pepper', 0.05);
    noisy_img(:,:,3) = imnoise(img(:,:,3), 'salt & pepper', 0.05);
    
    % Display original image, image with noise, and apply filter
    figure;
    subplot(1, 3, 1);
    imshow(uint8(img));
    title('Original Image');
    subplot(1, 3, 2);
    imshow(uint8(noisy_img));
    title('Image with Noise');

    % Apply 3x3 mean filter to each color channel separately
    filtered_img = zeros(size(noisy_img));
    for k = 1:3 % Loop through each color channel
        for i = 2:size(noisy_img, 1) - 1
            for j = 2:size(noisy_img, 2) - 1
                % Apply mean filter
                filtered_img(i, j, k) = mean(mean(noisy_img(i-1:i+1, j-1:j+1, k)));
            end
        end
    end

    % Display filtered image
    subplot(1, 3, 3);
    imshow(uint8(filtered_img));
    title('Filtered Image');
end
*************************************************************
function img = RGBgaussian_filter(img)
    % Convert image to double and scale to [0, 1]
    noisy_img = double(img) / 255;
    
    % Add salt and pepper noise to each color channel separately
    noisy_img(:,:,1) = imnoise(img(:,:,1), 'salt & pepper', 0.05);
    noisy_img(:,:,2) = imnoise(img(:,:,2), 'salt & pepper', 0.05);
    noisy_img(:,:,3) = imnoise(img(:,:,3), 'salt & pepper', 0.05);
    
    % Display original image, image with noise, and apply filter
    figure;
    subplot(1, 3, 1);
    imshow(uint8(img));
    title('Original Image');
    subplot(1, 3, 2);
    imshow(uint8(noisy_img));
    title('Image with Noise');

    % Apply custom Gaussian-like filter to each color channel separately
    [height, width, ~] = size(noisy_img);
    filtered_img = zeros(height, width, 3);
    for k = 1:3 % Loop through each color channel
        for i = 2:height-1
            for j = 2:width-1
                % Apply custom filter
                filtered_img(i, j, k) = (noisy_img(i-1,j-1,k)*1 + noisy_img(i-1,j,k)*2 + noisy_img(i-1,j+1,k)*1 + ...
                                         noisy_img(i,j-1,k)*2 + noisy_img(i,j,k)*4 + noisy_img(i,j+1,k)*2 + ...
                                         noisy_img(i+1,j-1,k)*1 + noisy_img(i+1,j,k)*2 + noisy_img(i+1,j+1,k)*1) / 16;
            end
        end
    end

    % Display filtered image
    subplot(1, 3, 3);
    imshow(uint8(filtered_img));
    title('Filtered Image');
end
*********************************************************right sobel filter**********
function sobel_img = sobel_edge_detection2(img)
    % Convert the image to grayscale if it's not already in grayscale
    if size(img, 3) == 3
        img_gray = rgb2gray(img);
    else
        img_gray = img;
    end
    % Convert the image to double
    img_gray = double(img_gray);
   
    % Sobel filters
    sobel_filter_x = [-1 0 1; -2 0 2; -1 0 1];
    sobel_filter_y = sobel_filter_x';

    % Get image dimensions
    [rows, cols] = size(img_gray);

    % Initialize filtered images
    filtered_img_x = zeros(rows, cols);
    filtered_img_y = zeros(rows, cols);

    % Perform convolution
    for i = 2:rows-1
        for j = 2:cols-1
            % Extract the region of interest
              roi = img_gray(i-1:i+1, j-1:j+1);
              filtered_img_x(i, j) = (img_gray(i-1, j-1) * -1 + img_gray(i-1, j) * 0 + img_gray(i-1, j+1) * 1 + ...
                                  img_gray(i, j-1) * -1 + img_gray(i, j) * 0 + img_gray(i, j+1) * 1 + ...
                                  img_gray(i+1, j-1) * -1 + img_gray(i+1, j) * 0 + img_gray(i+1, j+1) * 1);
              filtered_img_y(i, j) = (img_gray(i-1, j-1) * -1 + img_gray(i-1, j) * -1 + img_gray(i-1, j+1) * -1 + ...
                                  img_gray(i, j-1) * 0 + img_gray(i, j) * 0 + img_gray(i, j+1) * 0 + ...
                                  img_gray(i+1, j-1) * 1 + img_gray(i+1, j) * 1 + img_gray(i+1, j+1) * 1);
            % Perform convolution for x and y directions
            %filtered_img_x(i, j) = sum(sum(roi .* sobel_filter_x));
            %filtered_img_y(i, j) = sum(sum(roi .* sobel_filter_y));
        end
    end

    % Combine the horizontal and vertical edge images
    sobel_img = sqrt(filtered_img_x.^2 + filtered_img_y.^2);
end

//////////////////////////call function//////////////////////////////////////////////
% Read the example image
img = imread('peppers.png');

% Call the Sobel edge detection function
sobel_img = sobel_edge_detection(img);

% Display the result
imshow(uint8(sobel_img));
title('Sobel Edge Detection');
